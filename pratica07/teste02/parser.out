Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Li
Rule 1     Li -> [ E ]
Rule 2     Li -> [ ]
Rule 3     E -> N , E
Rule 4     E -> N
Rule 5     N -> Li
Rule 6     N -> ni

Terminals, with rules where they appear

,                    : 3
[                    : 1 2
]                    : 1 2
error                : 
ni                   : 6

Nonterminals, with rules where they appear

E                    : 1 3
Li                   : 5 0
N                    : 3 4

Parsing method: LALR

state 0

    (0) S' -> . Li
    (1) Li -> . [ E ]
    (2) Li -> . [ ]

    [               shift and go to state 2

    Li                             shift and go to state 1

state 1

    (0) S' -> Li .



state 2

    (1) Li -> [ . E ]
    (2) Li -> [ . ]
    (3) E -> . N , E
    (4) E -> . N
    (5) N -> . Li
    (6) N -> . ni
    (1) Li -> . [ E ]
    (2) Li -> . [ ]

    ]               shift and go to state 4
    ni              shift and go to state 7
    [               shift and go to state 2

    E                              shift and go to state 3
    N                              shift and go to state 5
    Li                             shift and go to state 6

state 3

    (1) Li -> [ E . ]

    ]               shift and go to state 8


state 4

    (2) Li -> [ ] .

    $end            reduce using rule 2 (Li -> [ ] .)
    ,               reduce using rule 2 (Li -> [ ] .)
    ]               reduce using rule 2 (Li -> [ ] .)


state 5

    (3) E -> N . , E
    (4) E -> N .

    ,               shift and go to state 9
    ]               reduce using rule 4 (E -> N .)


state 6

    (5) N -> Li .

    ,               reduce using rule 5 (N -> Li .)
    ]               reduce using rule 5 (N -> Li .)


state 7

    (6) N -> ni .

    ,               reduce using rule 6 (N -> ni .)
    ]               reduce using rule 6 (N -> ni .)


state 8

    (1) Li -> [ E ] .

    $end            reduce using rule 1 (Li -> [ E ] .)
    ,               reduce using rule 1 (Li -> [ E ] .)
    ]               reduce using rule 1 (Li -> [ E ] .)


state 9

    (3) E -> N , . E
    (3) E -> . N , E
    (4) E -> . N
    (5) N -> . Li
    (6) N -> . ni
    (1) Li -> . [ E ]
    (2) Li -> . [ ]

    ni              shift and go to state 7
    [               shift and go to state 2

    N                              shift and go to state 5
    E                              shift and go to state 10
    Li                             shift and go to state 6

state 10

    (3) E -> N , E .

    ]               reduce using rule 3 (E -> N , E .)

