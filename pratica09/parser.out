Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PRINT

Grammar

Rule 0     S' -> prog
Rule 1     prog -> comandos
Rule 2     comandos -> <empty>
Rule 3     comandos -> comandos comando
Rule 4     comando -> ID = exp
Rule 5     comando -> exp
Rule 6     comando -> DUMP
Rule 7     comando -> args
Rule 8     exp -> exp + exp
Rule 9     exp -> exp - exp
Rule 10    exp -> exp * exp
Rule 11    exp -> exp / exp
Rule 12    exp -> exp ^ exp
Rule 13    exp -> INT
Rule 14    exp -> ID
Rule 15    exp -> ( exp )
Rule 16    exp -> .
Rule 17    exp -> NEGATE exp
Rule 18    exp -> ID = exp
Rule 19    exp -> ID ( exp )
Rule 20    exp -> ID ( exp , exp )
Rule 21    args -> exp
Rule 22    args -> args , exp
Rule 23    args -> exp : exp

Terminals, with rules where they appear

(                    : 15 19 20
)                    : 15 19 20
*                    : 10
+                    : 8
,                    : 20 22
-                    : 9
.                    : 16
/                    : 11
:                    : 23
=                    : 4 18
DUMP                 : 6
ID                   : 4 14 18 19 20
INT                  : 13
NEGATE               : 17
PRINT                : 
^                    : 12
error                : 

Nonterminals, with rules where they appear

args                 : 7 22
comando              : 3
comandos             : 1 3
exp                  : 4 5 8 8 9 9 10 10 11 11 12 12 15 17 18 19 20 20 21 22 23 23
prog                 : 0

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . comandos
    (2) comandos -> .
    (3) comandos -> . comandos comando

    ID              reduce using rule 2 (comandos -> .)
    DUMP            reduce using rule 2 (comandos -> .)
    INT             reduce using rule 2 (comandos -> .)
    (               reduce using rule 2 (comandos -> .)
    .               reduce using rule 2 (comandos -> .)
    NEGATE          reduce using rule 2 (comandos -> .)
    $end            reduce using rule 2 (comandos -> .)

    prog                           shift and go to state 1
    comandos                       shift and go to state 2

state 1

    (0) S' -> prog .



state 2

    (1) prog -> comandos .
    (3) comandos -> comandos . comando
    (4) comando -> . ID = exp
    (5) comando -> . exp
    (6) comando -> . DUMP
    (7) comando -> . args
    (8) exp -> . exp + exp
    (9) exp -> . exp - exp
    (10) exp -> . exp * exp
    (11) exp -> . exp / exp
    (12) exp -> . exp ^ exp
    (13) exp -> . INT
    (14) exp -> . ID
    (15) exp -> . ( exp )
    (16) exp -> . .
    (17) exp -> . NEGATE exp
    (18) exp -> . ID = exp
    (19) exp -> . ID ( exp )
    (20) exp -> . ID ( exp , exp )
    (21) args -> . exp
    (22) args -> . args , exp
    (23) args -> . exp : exp

    $end            reduce using rule 1 (prog -> comandos .)
    ID              shift and go to state 4
    DUMP            shift and go to state 6
    INT             shift and go to state 8
    (               shift and go to state 9
    .               shift and go to state 10
    NEGATE          shift and go to state 11

    comando                        shift and go to state 3
    exp                            shift and go to state 5
    args                           shift and go to state 7

state 3

    (3) comandos -> comandos comando .

    ID              reduce using rule 3 (comandos -> comandos comando .)
    DUMP            reduce using rule 3 (comandos -> comandos comando .)
    INT             reduce using rule 3 (comandos -> comandos comando .)
    (               reduce using rule 3 (comandos -> comandos comando .)
    .               reduce using rule 3 (comandos -> comandos comando .)
    NEGATE          reduce using rule 3 (comandos -> comandos comando .)
    $end            reduce using rule 3 (comandos -> comandos comando .)


state 4

    (4) comando -> ID . = exp
    (14) exp -> ID .
    (18) exp -> ID . = exp
    (19) exp -> ID . ( exp )
    (20) exp -> ID . ( exp , exp )

  ! shift/reduce conflict for ( resolved as shift
    =               shift and go to state 12
    +               reduce using rule 14 (exp -> ID .)
    -               reduce using rule 14 (exp -> ID .)
    *               reduce using rule 14 (exp -> ID .)
    /               reduce using rule 14 (exp -> ID .)
    ^               reduce using rule 14 (exp -> ID .)
    :               reduce using rule 14 (exp -> ID .)
    ID              reduce using rule 14 (exp -> ID .)
    DUMP            reduce using rule 14 (exp -> ID .)
    INT             reduce using rule 14 (exp -> ID .)
    .               reduce using rule 14 (exp -> ID .)
    NEGATE          reduce using rule 14 (exp -> ID .)
    $end            reduce using rule 14 (exp -> ID .)
    ,               reduce using rule 14 (exp -> ID .)
    (               shift and go to state 13

  ! (               [ reduce using rule 14 (exp -> ID .) ]


state 5

    (5) comando -> exp .
    (8) exp -> exp . + exp
    (9) exp -> exp . - exp
    (10) exp -> exp . * exp
    (11) exp -> exp . / exp
    (12) exp -> exp . ^ exp
    (21) args -> exp .
    (23) args -> exp . : exp

  ! reduce/reduce conflict for ID resolved using rule 5 (comando -> exp .)
  ! reduce/reduce conflict for DUMP resolved using rule 5 (comando -> exp .)
  ! reduce/reduce conflict for INT resolved using rule 5 (comando -> exp .)
  ! reduce/reduce conflict for ( resolved using rule 5 (comando -> exp .)
  ! reduce/reduce conflict for . resolved using rule 5 (comando -> exp .)
  ! reduce/reduce conflict for NEGATE resolved using rule 5 (comando -> exp .)
  ! reduce/reduce conflict for $end resolved using rule 5 (comando -> exp .)
    ID              reduce using rule 5 (comando -> exp .)
    DUMP            reduce using rule 5 (comando -> exp .)
    INT             reduce using rule 5 (comando -> exp .)
    (               reduce using rule 5 (comando -> exp .)
    .               reduce using rule 5 (comando -> exp .)
    NEGATE          reduce using rule 5 (comando -> exp .)
    $end            reduce using rule 5 (comando -> exp .)
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17
    ^               shift and go to state 18
    ,               reduce using rule 21 (args -> exp .)
    :               shift and go to state 19

  ! ID              [ reduce using rule 21 (args -> exp .) ]
  ! DUMP            [ reduce using rule 21 (args -> exp .) ]
  ! INT             [ reduce using rule 21 (args -> exp .) ]
  ! (               [ reduce using rule 21 (args -> exp .) ]
  ! .               [ reduce using rule 21 (args -> exp .) ]
  ! NEGATE          [ reduce using rule 21 (args -> exp .) ]
  ! $end            [ reduce using rule 21 (args -> exp .) ]


state 6

    (6) comando -> DUMP .

    ID              reduce using rule 6 (comando -> DUMP .)
    DUMP            reduce using rule 6 (comando -> DUMP .)
    INT             reduce using rule 6 (comando -> DUMP .)
    (               reduce using rule 6 (comando -> DUMP .)
    .               reduce using rule 6 (comando -> DUMP .)
    NEGATE          reduce using rule 6 (comando -> DUMP .)
    $end            reduce using rule 6 (comando -> DUMP .)


state 7

    (7) comando -> args .
    (22) args -> args . , exp

    ID              reduce using rule 7 (comando -> args .)
    DUMP            reduce using rule 7 (comando -> args .)
    INT             reduce using rule 7 (comando -> args .)
    (               reduce using rule 7 (comando -> args .)
    .               reduce using rule 7 (comando -> args .)
    NEGATE          reduce using rule 7 (comando -> args .)
    $end            reduce using rule 7 (comando -> args .)
    ,               shift and go to state 20


state 8

    (13) exp -> INT .

    +               reduce using rule 13 (exp -> INT .)
    -               reduce using rule 13 (exp -> INT .)
    *               reduce using rule 13 (exp -> INT .)
    /               reduce using rule 13 (exp -> INT .)
    ^               reduce using rule 13 (exp -> INT .)
    :               reduce using rule 13 (exp -> INT .)
    ID              reduce using rule 13 (exp -> INT .)
    DUMP            reduce using rule 13 (exp -> INT .)
    INT             reduce using rule 13 (exp -> INT .)
    (               reduce using rule 13 (exp -> INT .)
    .               reduce using rule 13 (exp -> INT .)
    NEGATE          reduce using rule 13 (exp -> INT .)
    $end            reduce using rule 13 (exp -> INT .)
    ,               reduce using rule 13 (exp -> INT .)
    )               reduce using rule 13 (exp -> INT .)


state 9

    (15) exp -> ( . exp )
    (8) exp -> . exp + exp
    (9) exp -> . exp - exp
    (10) exp -> . exp * exp
    (11) exp -> . exp / exp
    (12) exp -> . exp ^ exp
    (13) exp -> . INT
    (14) exp -> . ID
    (15) exp -> . ( exp )
    (16) exp -> . .
    (17) exp -> . NEGATE exp
    (18) exp -> . ID = exp
    (19) exp -> . ID ( exp )
    (20) exp -> . ID ( exp , exp )

    INT             shift and go to state 8
    ID              shift and go to state 22
    (               shift and go to state 9
    .               shift and go to state 10
    NEGATE          shift and go to state 11

    exp                            shift and go to state 21

state 10

    (16) exp -> . .

    +               reduce using rule 16 (exp -> . .)
    -               reduce using rule 16 (exp -> . .)
    *               reduce using rule 16 (exp -> . .)
    /               reduce using rule 16 (exp -> . .)
    ^               reduce using rule 16 (exp -> . .)
    :               reduce using rule 16 (exp -> . .)
    ID              reduce using rule 16 (exp -> . .)
    DUMP            reduce using rule 16 (exp -> . .)
    INT             reduce using rule 16 (exp -> . .)
    (               reduce using rule 16 (exp -> . .)
    .               reduce using rule 16 (exp -> . .)
    NEGATE          reduce using rule 16 (exp -> . .)
    $end            reduce using rule 16 (exp -> . .)
    ,               reduce using rule 16 (exp -> . .)
    )               reduce using rule 16 (exp -> . .)


state 11

    (17) exp -> NEGATE . exp
    (8) exp -> . exp + exp
    (9) exp -> . exp - exp
    (10) exp -> . exp * exp
    (11) exp -> . exp / exp
    (12) exp -> . exp ^ exp
    (13) exp -> . INT
    (14) exp -> . ID
    (15) exp -> . ( exp )
    (16) exp -> . .
    (17) exp -> . NEGATE exp
    (18) exp -> . ID = exp
    (19) exp -> . ID ( exp )
    (20) exp -> . ID ( exp , exp )

    INT             shift and go to state 8
    ID              shift and go to state 22
    (               shift and go to state 9
    .               shift and go to state 10
    NEGATE          shift and go to state 11

    exp                            shift and go to state 23

state 12

    (4) comando -> ID = . exp
    (18) exp -> ID = . exp
    (8) exp -> . exp + exp
    (9) exp -> . exp - exp
    (10) exp -> . exp * exp
    (11) exp -> . exp / exp
    (12) exp -> . exp ^ exp
    (13) exp -> . INT
    (14) exp -> . ID
    (15) exp -> . ( exp )
    (16) exp -> . .
    (17) exp -> . NEGATE exp
    (18) exp -> . ID = exp
    (19) exp -> . ID ( exp )
    (20) exp -> . ID ( exp , exp )

    INT             shift and go to state 8
    ID              shift and go to state 22
    (               shift and go to state 9
    .               shift and go to state 10
    NEGATE          shift and go to state 11

    exp                            shift and go to state 24

state 13

    (19) exp -> ID ( . exp )
    (20) exp -> ID ( . exp , exp )
    (8) exp -> . exp + exp
    (9) exp -> . exp - exp
    (10) exp -> . exp * exp
    (11) exp -> . exp / exp
    (12) exp -> . exp ^ exp
    (13) exp -> . INT
    (14) exp -> . ID
    (15) exp -> . ( exp )
    (16) exp -> . .
    (17) exp -> . NEGATE exp
    (18) exp -> . ID = exp
    (19) exp -> . ID ( exp )
    (20) exp -> . ID ( exp , exp )

    INT             shift and go to state 8
    ID              shift and go to state 22
    (               shift and go to state 9
    .               shift and go to state 10
    NEGATE          shift and go to state 11

    exp                            shift and go to state 25

state 14

    (8) exp -> exp + . exp
    (8) exp -> . exp + exp
    (9) exp -> . exp - exp
    (10) exp -> . exp * exp
    (11) exp -> . exp / exp
    (12) exp -> . exp ^ exp
    (13) exp -> . INT
    (14) exp -> . ID
    (15) exp -> . ( exp )
    (16) exp -> . .
    (17) exp -> . NEGATE exp
    (18) exp -> . ID = exp
    (19) exp -> . ID ( exp )
    (20) exp -> . ID ( exp , exp )

    INT             shift and go to state 8
    ID              shift and go to state 22
    (               shift and go to state 9
    .               shift and go to state 10
    NEGATE          shift and go to state 11

    exp                            shift and go to state 26

state 15

    (9) exp -> exp - . exp
    (8) exp -> . exp + exp
    (9) exp -> . exp - exp
    (10) exp -> . exp * exp
    (11) exp -> . exp / exp
    (12) exp -> . exp ^ exp
    (13) exp -> . INT
    (14) exp -> . ID
    (15) exp -> . ( exp )
    (16) exp -> . .
    (17) exp -> . NEGATE exp
    (18) exp -> . ID = exp
    (19) exp -> . ID ( exp )
    (20) exp -> . ID ( exp , exp )

    INT             shift and go to state 8
    ID              shift and go to state 22
    (               shift and go to state 9
    .               shift and go to state 10
    NEGATE          shift and go to state 11

    exp                            shift and go to state 27

state 16

    (10) exp -> exp * . exp
    (8) exp -> . exp + exp
    (9) exp -> . exp - exp
    (10) exp -> . exp * exp
    (11) exp -> . exp / exp
    (12) exp -> . exp ^ exp
    (13) exp -> . INT
    (14) exp -> . ID
    (15) exp -> . ( exp )
    (16) exp -> . .
    (17) exp -> . NEGATE exp
    (18) exp -> . ID = exp
    (19) exp -> . ID ( exp )
    (20) exp -> . ID ( exp , exp )

    INT             shift and go to state 8
    ID              shift and go to state 22
    (               shift and go to state 9
    .               shift and go to state 10
    NEGATE          shift and go to state 11

    exp                            shift and go to state 28

state 17

    (11) exp -> exp / . exp
    (8) exp -> . exp + exp
    (9) exp -> . exp - exp
    (10) exp -> . exp * exp
    (11) exp -> . exp / exp
    (12) exp -> . exp ^ exp
    (13) exp -> . INT
    (14) exp -> . ID
    (15) exp -> . ( exp )
    (16) exp -> . .
    (17) exp -> . NEGATE exp
    (18) exp -> . ID = exp
    (19) exp -> . ID ( exp )
    (20) exp -> . ID ( exp , exp )

    INT             shift and go to state 8
    ID              shift and go to state 22
    (               shift and go to state 9
    .               shift and go to state 10
    NEGATE          shift and go to state 11

    exp                            shift and go to state 29

state 18

    (12) exp -> exp ^ . exp
    (8) exp -> . exp + exp
    (9) exp -> . exp - exp
    (10) exp -> . exp * exp
    (11) exp -> . exp / exp
    (12) exp -> . exp ^ exp
    (13) exp -> . INT
    (14) exp -> . ID
    (15) exp -> . ( exp )
    (16) exp -> . .
    (17) exp -> . NEGATE exp
    (18) exp -> . ID = exp
    (19) exp -> . ID ( exp )
    (20) exp -> . ID ( exp , exp )

    INT             shift and go to state 8
    ID              shift and go to state 22
    (               shift and go to state 9
    .               shift and go to state 10
    NEGATE          shift and go to state 11

    exp                            shift and go to state 30

state 19

    (23) args -> exp : . exp
    (8) exp -> . exp + exp
    (9) exp -> . exp - exp
    (10) exp -> . exp * exp
    (11) exp -> . exp / exp
    (12) exp -> . exp ^ exp
    (13) exp -> . INT
    (14) exp -> . ID
    (15) exp -> . ( exp )
    (16) exp -> . .
    (17) exp -> . NEGATE exp
    (18) exp -> . ID = exp
    (19) exp -> . ID ( exp )
    (20) exp -> . ID ( exp , exp )

    INT             shift and go to state 8
    ID              shift and go to state 22
    (               shift and go to state 9
    .               shift and go to state 10
    NEGATE          shift and go to state 11

    exp                            shift and go to state 31

state 20

    (22) args -> args , . exp
    (8) exp -> . exp + exp
    (9) exp -> . exp - exp
    (10) exp -> . exp * exp
    (11) exp -> . exp / exp
    (12) exp -> . exp ^ exp
    (13) exp -> . INT
    (14) exp -> . ID
    (15) exp -> . ( exp )
    (16) exp -> . .
    (17) exp -> . NEGATE exp
    (18) exp -> . ID = exp
    (19) exp -> . ID ( exp )
    (20) exp -> . ID ( exp , exp )

    INT             shift and go to state 8
    ID              shift and go to state 22
    (               shift and go to state 9
    .               shift and go to state 10
    NEGATE          shift and go to state 11

    exp                            shift and go to state 32

state 21

    (15) exp -> ( exp . )
    (8) exp -> exp . + exp
    (9) exp -> exp . - exp
    (10) exp -> exp . * exp
    (11) exp -> exp . / exp
    (12) exp -> exp . ^ exp

    )               shift and go to state 33
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17
    ^               shift and go to state 18


state 22

    (14) exp -> ID .
    (18) exp -> ID . = exp
    (19) exp -> ID . ( exp )
    (20) exp -> ID . ( exp , exp )

  ! shift/reduce conflict for ( resolved as shift
    )               reduce using rule 14 (exp -> ID .)
    +               reduce using rule 14 (exp -> ID .)
    -               reduce using rule 14 (exp -> ID .)
    *               reduce using rule 14 (exp -> ID .)
    /               reduce using rule 14 (exp -> ID .)
    ^               reduce using rule 14 (exp -> ID .)
    :               reduce using rule 14 (exp -> ID .)
    ID              reduce using rule 14 (exp -> ID .)
    DUMP            reduce using rule 14 (exp -> ID .)
    INT             reduce using rule 14 (exp -> ID .)
    .               reduce using rule 14 (exp -> ID .)
    NEGATE          reduce using rule 14 (exp -> ID .)
    $end            reduce using rule 14 (exp -> ID .)
    ,               reduce using rule 14 (exp -> ID .)
    =               shift and go to state 34
    (               shift and go to state 13

  ! (               [ reduce using rule 14 (exp -> ID .) ]


state 23

    (17) exp -> NEGATE exp .
    (8) exp -> exp . + exp
    (9) exp -> exp . - exp
    (10) exp -> exp . * exp
    (11) exp -> exp . / exp
    (12) exp -> exp . ^ exp

    +               reduce using rule 17 (exp -> NEGATE exp .)
    -               reduce using rule 17 (exp -> NEGATE exp .)
    *               reduce using rule 17 (exp -> NEGATE exp .)
    /               reduce using rule 17 (exp -> NEGATE exp .)
    ^               reduce using rule 17 (exp -> NEGATE exp .)
    :               reduce using rule 17 (exp -> NEGATE exp .)
    ID              reduce using rule 17 (exp -> NEGATE exp .)
    DUMP            reduce using rule 17 (exp -> NEGATE exp .)
    INT             reduce using rule 17 (exp -> NEGATE exp .)
    (               reduce using rule 17 (exp -> NEGATE exp .)
    .               reduce using rule 17 (exp -> NEGATE exp .)
    NEGATE          reduce using rule 17 (exp -> NEGATE exp .)
    $end            reduce using rule 17 (exp -> NEGATE exp .)
    ,               reduce using rule 17 (exp -> NEGATE exp .)
    )               reduce using rule 17 (exp -> NEGATE exp .)

  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]
  ! *               [ shift and go to state 16 ]
  ! /               [ shift and go to state 17 ]
  ! ^               [ shift and go to state 18 ]


state 24

    (4) comando -> ID = exp .
    (18) exp -> ID = exp .
    (8) exp -> exp . + exp
    (9) exp -> exp . - exp
    (10) exp -> exp . * exp
    (11) exp -> exp . / exp
    (12) exp -> exp . ^ exp

  ! reduce/reduce conflict for ID resolved using rule 4 (comando -> ID = exp .)
  ! reduce/reduce conflict for DUMP resolved using rule 4 (comando -> ID = exp .)
  ! reduce/reduce conflict for INT resolved using rule 4 (comando -> ID = exp .)
  ! reduce/reduce conflict for ( resolved using rule 4 (comando -> ID = exp .)
  ! reduce/reduce conflict for . resolved using rule 4 (comando -> ID = exp .)
  ! reduce/reduce conflict for NEGATE resolved using rule 4 (comando -> ID = exp .)
  ! reduce/reduce conflict for $end resolved using rule 4 (comando -> ID = exp .)
    ID              reduce using rule 4 (comando -> ID = exp .)
    DUMP            reduce using rule 4 (comando -> ID = exp .)
    INT             reduce using rule 4 (comando -> ID = exp .)
    (               reduce using rule 4 (comando -> ID = exp .)
    .               reduce using rule 4 (comando -> ID = exp .)
    NEGATE          reduce using rule 4 (comando -> ID = exp .)
    $end            reduce using rule 4 (comando -> ID = exp .)
    :               reduce using rule 18 (exp -> ID = exp .)
    ,               reduce using rule 18 (exp -> ID = exp .)
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17
    ^               shift and go to state 18

  ! +               [ reduce using rule 18 (exp -> ID = exp .) ]
  ! -               [ reduce using rule 18 (exp -> ID = exp .) ]
  ! *               [ reduce using rule 18 (exp -> ID = exp .) ]
  ! /               [ reduce using rule 18 (exp -> ID = exp .) ]
  ! ^               [ reduce using rule 18 (exp -> ID = exp .) ]
  ! ID              [ reduce using rule 18 (exp -> ID = exp .) ]
  ! DUMP            [ reduce using rule 18 (exp -> ID = exp .) ]
  ! INT             [ reduce using rule 18 (exp -> ID = exp .) ]
  ! (               [ reduce using rule 18 (exp -> ID = exp .) ]
  ! .               [ reduce using rule 18 (exp -> ID = exp .) ]
  ! NEGATE          [ reduce using rule 18 (exp -> ID = exp .) ]
  ! $end            [ reduce using rule 18 (exp -> ID = exp .) ]


state 25

    (19) exp -> ID ( exp . )
    (20) exp -> ID ( exp . , exp )
    (8) exp -> exp . + exp
    (9) exp -> exp . - exp
    (10) exp -> exp . * exp
    (11) exp -> exp . / exp
    (12) exp -> exp . ^ exp

    )               shift and go to state 35
    ,               shift and go to state 36
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17
    ^               shift and go to state 18


state 26

    (8) exp -> exp + exp .
    (8) exp -> exp . + exp
    (9) exp -> exp . - exp
    (10) exp -> exp . * exp
    (11) exp -> exp . / exp
    (12) exp -> exp . ^ exp

    +               reduce using rule 8 (exp -> exp + exp .)
    -               reduce using rule 8 (exp -> exp + exp .)
    :               reduce using rule 8 (exp -> exp + exp .)
    ID              reduce using rule 8 (exp -> exp + exp .)
    DUMP            reduce using rule 8 (exp -> exp + exp .)
    INT             reduce using rule 8 (exp -> exp + exp .)
    (               reduce using rule 8 (exp -> exp + exp .)
    .               reduce using rule 8 (exp -> exp + exp .)
    NEGATE          reduce using rule 8 (exp -> exp + exp .)
    $end            reduce using rule 8 (exp -> exp + exp .)
    ,               reduce using rule 8 (exp -> exp + exp .)
    )               reduce using rule 8 (exp -> exp + exp .)
    *               shift and go to state 16
    /               shift and go to state 17
    ^               shift and go to state 18

  ! *               [ reduce using rule 8 (exp -> exp + exp .) ]
  ! /               [ reduce using rule 8 (exp -> exp + exp .) ]
  ! ^               [ reduce using rule 8 (exp -> exp + exp .) ]
  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]


state 27

    (9) exp -> exp - exp .
    (8) exp -> exp . + exp
    (9) exp -> exp . - exp
    (10) exp -> exp . * exp
    (11) exp -> exp . / exp
    (12) exp -> exp . ^ exp

    +               reduce using rule 9 (exp -> exp - exp .)
    -               reduce using rule 9 (exp -> exp - exp .)
    :               reduce using rule 9 (exp -> exp - exp .)
    ID              reduce using rule 9 (exp -> exp - exp .)
    DUMP            reduce using rule 9 (exp -> exp - exp .)
    INT             reduce using rule 9 (exp -> exp - exp .)
    (               reduce using rule 9 (exp -> exp - exp .)
    .               reduce using rule 9 (exp -> exp - exp .)
    NEGATE          reduce using rule 9 (exp -> exp - exp .)
    $end            reduce using rule 9 (exp -> exp - exp .)
    ,               reduce using rule 9 (exp -> exp - exp .)
    )               reduce using rule 9 (exp -> exp - exp .)
    *               shift and go to state 16
    /               shift and go to state 17
    ^               shift and go to state 18

  ! *               [ reduce using rule 9 (exp -> exp - exp .) ]
  ! /               [ reduce using rule 9 (exp -> exp - exp .) ]
  ! ^               [ reduce using rule 9 (exp -> exp - exp .) ]
  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]


state 28

    (10) exp -> exp * exp .
    (8) exp -> exp . + exp
    (9) exp -> exp . - exp
    (10) exp -> exp . * exp
    (11) exp -> exp . / exp
    (12) exp -> exp . ^ exp

    +               reduce using rule 10 (exp -> exp * exp .)
    -               reduce using rule 10 (exp -> exp * exp .)
    *               reduce using rule 10 (exp -> exp * exp .)
    /               reduce using rule 10 (exp -> exp * exp .)
    :               reduce using rule 10 (exp -> exp * exp .)
    ID              reduce using rule 10 (exp -> exp * exp .)
    DUMP            reduce using rule 10 (exp -> exp * exp .)
    INT             reduce using rule 10 (exp -> exp * exp .)
    (               reduce using rule 10 (exp -> exp * exp .)
    .               reduce using rule 10 (exp -> exp * exp .)
    NEGATE          reduce using rule 10 (exp -> exp * exp .)
    $end            reduce using rule 10 (exp -> exp * exp .)
    ,               reduce using rule 10 (exp -> exp * exp .)
    )               reduce using rule 10 (exp -> exp * exp .)
    ^               shift and go to state 18

  ! ^               [ reduce using rule 10 (exp -> exp * exp .) ]
  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]
  ! *               [ shift and go to state 16 ]
  ! /               [ shift and go to state 17 ]


state 29

    (11) exp -> exp / exp .
    (8) exp -> exp . + exp
    (9) exp -> exp . - exp
    (10) exp -> exp . * exp
    (11) exp -> exp . / exp
    (12) exp -> exp . ^ exp

    +               reduce using rule 11 (exp -> exp / exp .)
    -               reduce using rule 11 (exp -> exp / exp .)
    *               reduce using rule 11 (exp -> exp / exp .)
    /               reduce using rule 11 (exp -> exp / exp .)
    :               reduce using rule 11 (exp -> exp / exp .)
    ID              reduce using rule 11 (exp -> exp / exp .)
    DUMP            reduce using rule 11 (exp -> exp / exp .)
    INT             reduce using rule 11 (exp -> exp / exp .)
    (               reduce using rule 11 (exp -> exp / exp .)
    .               reduce using rule 11 (exp -> exp / exp .)
    NEGATE          reduce using rule 11 (exp -> exp / exp .)
    $end            reduce using rule 11 (exp -> exp / exp .)
    ,               reduce using rule 11 (exp -> exp / exp .)
    )               reduce using rule 11 (exp -> exp / exp .)
    ^               shift and go to state 18

  ! ^               [ reduce using rule 11 (exp -> exp / exp .) ]
  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]
  ! *               [ shift and go to state 16 ]
  ! /               [ shift and go to state 17 ]


state 30

    (12) exp -> exp ^ exp .
    (8) exp -> exp . + exp
    (9) exp -> exp . - exp
    (10) exp -> exp . * exp
    (11) exp -> exp . / exp
    (12) exp -> exp . ^ exp

    +               reduce using rule 12 (exp -> exp ^ exp .)
    -               reduce using rule 12 (exp -> exp ^ exp .)
    *               reduce using rule 12 (exp -> exp ^ exp .)
    /               reduce using rule 12 (exp -> exp ^ exp .)
    :               reduce using rule 12 (exp -> exp ^ exp .)
    ID              reduce using rule 12 (exp -> exp ^ exp .)
    DUMP            reduce using rule 12 (exp -> exp ^ exp .)
    INT             reduce using rule 12 (exp -> exp ^ exp .)
    (               reduce using rule 12 (exp -> exp ^ exp .)
    .               reduce using rule 12 (exp -> exp ^ exp .)
    NEGATE          reduce using rule 12 (exp -> exp ^ exp .)
    $end            reduce using rule 12 (exp -> exp ^ exp .)
    ,               reduce using rule 12 (exp -> exp ^ exp .)
    )               reduce using rule 12 (exp -> exp ^ exp .)
    ^               shift and go to state 18

  ! ^               [ reduce using rule 12 (exp -> exp ^ exp .) ]
  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]
  ! *               [ shift and go to state 16 ]
  ! /               [ shift and go to state 17 ]


state 31

    (23) args -> exp : exp .
    (8) exp -> exp . + exp
    (9) exp -> exp . - exp
    (10) exp -> exp . * exp
    (11) exp -> exp . / exp
    (12) exp -> exp . ^ exp

    ,               reduce using rule 23 (args -> exp : exp .)
    ID              reduce using rule 23 (args -> exp : exp .)
    DUMP            reduce using rule 23 (args -> exp : exp .)
    INT             reduce using rule 23 (args -> exp : exp .)
    (               reduce using rule 23 (args -> exp : exp .)
    .               reduce using rule 23 (args -> exp : exp .)
    NEGATE          reduce using rule 23 (args -> exp : exp .)
    $end            reduce using rule 23 (args -> exp : exp .)
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17
    ^               shift and go to state 18


state 32

    (22) args -> args , exp .
    (8) exp -> exp . + exp
    (9) exp -> exp . - exp
    (10) exp -> exp . * exp
    (11) exp -> exp . / exp
    (12) exp -> exp . ^ exp

    ,               reduce using rule 22 (args -> args , exp .)
    ID              reduce using rule 22 (args -> args , exp .)
    DUMP            reduce using rule 22 (args -> args , exp .)
    INT             reduce using rule 22 (args -> args , exp .)
    (               reduce using rule 22 (args -> args , exp .)
    .               reduce using rule 22 (args -> args , exp .)
    NEGATE          reduce using rule 22 (args -> args , exp .)
    $end            reduce using rule 22 (args -> args , exp .)
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17
    ^               shift and go to state 18


state 33

    (15) exp -> ( exp ) .

    +               reduce using rule 15 (exp -> ( exp ) .)
    -               reduce using rule 15 (exp -> ( exp ) .)
    *               reduce using rule 15 (exp -> ( exp ) .)
    /               reduce using rule 15 (exp -> ( exp ) .)
    ^               reduce using rule 15 (exp -> ( exp ) .)
    :               reduce using rule 15 (exp -> ( exp ) .)
    ID              reduce using rule 15 (exp -> ( exp ) .)
    DUMP            reduce using rule 15 (exp -> ( exp ) .)
    INT             reduce using rule 15 (exp -> ( exp ) .)
    (               reduce using rule 15 (exp -> ( exp ) .)
    .               reduce using rule 15 (exp -> ( exp ) .)
    NEGATE          reduce using rule 15 (exp -> ( exp ) .)
    $end            reduce using rule 15 (exp -> ( exp ) .)
    ,               reduce using rule 15 (exp -> ( exp ) .)
    )               reduce using rule 15 (exp -> ( exp ) .)


state 34

    (18) exp -> ID = . exp
    (8) exp -> . exp + exp
    (9) exp -> . exp - exp
    (10) exp -> . exp * exp
    (11) exp -> . exp / exp
    (12) exp -> . exp ^ exp
    (13) exp -> . INT
    (14) exp -> . ID
    (15) exp -> . ( exp )
    (16) exp -> . .
    (17) exp -> . NEGATE exp
    (18) exp -> . ID = exp
    (19) exp -> . ID ( exp )
    (20) exp -> . ID ( exp , exp )

    INT             shift and go to state 8
    ID              shift and go to state 22
    (               shift and go to state 9
    .               shift and go to state 10
    NEGATE          shift and go to state 11

    exp                            shift and go to state 37

state 35

    (19) exp -> ID ( exp ) .

    +               reduce using rule 19 (exp -> ID ( exp ) .)
    -               reduce using rule 19 (exp -> ID ( exp ) .)
    *               reduce using rule 19 (exp -> ID ( exp ) .)
    /               reduce using rule 19 (exp -> ID ( exp ) .)
    ^               reduce using rule 19 (exp -> ID ( exp ) .)
    :               reduce using rule 19 (exp -> ID ( exp ) .)
    ID              reduce using rule 19 (exp -> ID ( exp ) .)
    DUMP            reduce using rule 19 (exp -> ID ( exp ) .)
    INT             reduce using rule 19 (exp -> ID ( exp ) .)
    (               reduce using rule 19 (exp -> ID ( exp ) .)
    .               reduce using rule 19 (exp -> ID ( exp ) .)
    NEGATE          reduce using rule 19 (exp -> ID ( exp ) .)
    $end            reduce using rule 19 (exp -> ID ( exp ) .)
    ,               reduce using rule 19 (exp -> ID ( exp ) .)
    )               reduce using rule 19 (exp -> ID ( exp ) .)


state 36

    (20) exp -> ID ( exp , . exp )
    (8) exp -> . exp + exp
    (9) exp -> . exp - exp
    (10) exp -> . exp * exp
    (11) exp -> . exp / exp
    (12) exp -> . exp ^ exp
    (13) exp -> . INT
    (14) exp -> . ID
    (15) exp -> . ( exp )
    (16) exp -> . .
    (17) exp -> . NEGATE exp
    (18) exp -> . ID = exp
    (19) exp -> . ID ( exp )
    (20) exp -> . ID ( exp , exp )

    INT             shift and go to state 8
    ID              shift and go to state 22
    (               shift and go to state 9
    .               shift and go to state 10
    NEGATE          shift and go to state 11

    exp                            shift and go to state 38

state 37

    (18) exp -> ID = exp .
    (8) exp -> exp . + exp
    (9) exp -> exp . - exp
    (10) exp -> exp . * exp
    (11) exp -> exp . / exp
    (12) exp -> exp . ^ exp

    )               reduce using rule 18 (exp -> ID = exp .)
    :               reduce using rule 18 (exp -> ID = exp .)
    ID              reduce using rule 18 (exp -> ID = exp .)
    DUMP            reduce using rule 18 (exp -> ID = exp .)
    INT             reduce using rule 18 (exp -> ID = exp .)
    (               reduce using rule 18 (exp -> ID = exp .)
    .               reduce using rule 18 (exp -> ID = exp .)
    NEGATE          reduce using rule 18 (exp -> ID = exp .)
    $end            reduce using rule 18 (exp -> ID = exp .)
    ,               reduce using rule 18 (exp -> ID = exp .)
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17
    ^               shift and go to state 18

  ! +               [ reduce using rule 18 (exp -> ID = exp .) ]
  ! -               [ reduce using rule 18 (exp -> ID = exp .) ]
  ! *               [ reduce using rule 18 (exp -> ID = exp .) ]
  ! /               [ reduce using rule 18 (exp -> ID = exp .) ]
  ! ^               [ reduce using rule 18 (exp -> ID = exp .) ]


state 38

    (20) exp -> ID ( exp , exp . )
    (8) exp -> exp . + exp
    (9) exp -> exp . - exp
    (10) exp -> exp . * exp
    (11) exp -> exp . / exp
    (12) exp -> exp . ^ exp

    )               shift and go to state 39
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17
    ^               shift and go to state 18


state 39

    (20) exp -> ID ( exp , exp ) .

    +               reduce using rule 20 (exp -> ID ( exp , exp ) .)
    -               reduce using rule 20 (exp -> ID ( exp , exp ) .)
    *               reduce using rule 20 (exp -> ID ( exp , exp ) .)
    /               reduce using rule 20 (exp -> ID ( exp , exp ) .)
    ^               reduce using rule 20 (exp -> ID ( exp , exp ) .)
    :               reduce using rule 20 (exp -> ID ( exp , exp ) .)
    ID              reduce using rule 20 (exp -> ID ( exp , exp ) .)
    DUMP            reduce using rule 20 (exp -> ID ( exp , exp ) .)
    INT             reduce using rule 20 (exp -> ID ( exp , exp ) .)
    (               reduce using rule 20 (exp -> ID ( exp , exp ) .)
    .               reduce using rule 20 (exp -> ID ( exp , exp ) .)
    NEGATE          reduce using rule 20 (exp -> ID ( exp , exp ) .)
    $end            reduce using rule 20 (exp -> ID ( exp , exp ) .)
    ,               reduce using rule 20 (exp -> ID ( exp , exp ) .)
    )               reduce using rule 20 (exp -> ID ( exp , exp ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ( in state 4 resolved as shift
WARNING: shift/reduce conflict for ( in state 22 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (comando -> exp)
WARNING: rejected rule (args -> exp) in state 5
WARNING: reduce/reduce conflict in state 24 resolved using rule (comando -> ID = exp)
WARNING: rejected rule (exp -> ID = exp) in state 24
